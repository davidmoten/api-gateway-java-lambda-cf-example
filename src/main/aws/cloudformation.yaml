AWSTemplateFormatVersion: 2010-09-09

Parameters:

  stage:
    Default: dev
    Description: api stage
    Type: String
    MinLength: 1
    MaxLength: 255
    
  artifactBucket:
    Default: artifacts
    Type: String
  
  artifactObjectName:
    Default: artifact-6.0-SNAPSHOT.jar
    Type: String
    
  application:
    Default: application
    Type: String
    
  handler:
    Default: com.github.davidmoten.apig.example.Handler::handleRequest
    Type: String
    
  path: 
    Default: do
    Type: String

Resources:

  LambdaFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${application}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub '${artifactBucket}'
        S3Key: !Sub '${artifactObjectName}'
      FunctionName: !Sub '${application}'
      Handler: !Sub '${handler}'
      MemorySize: 512
      Timeout: 300 # seconds
      Role: !GetAtt 
        - LambdaFunctionRole
        - Arn
      Runtime: java8
      Environment:
        Variables:
          WHO: !Sub "${application}"
          
  ## give the /do api gateway resource permission to execute the lambda
  ApiGatewayInvokeApiGetLambdaPermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - Api
    - LambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
      ## * below allows the Aws Console API Gateway Test to work. 
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/GET/*"
      
  ## create the deployment of a stage (so that the stage is published to an https url)
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      Description: !Sub "deployment of stage ${stage}"
      RestApiId:
        Ref: Api
      StageName: !Sub "${stage}Dummy" # must be different from stage name below (see https://blog.jayway.com/2016/08/17/introduction-to-cloudformation-for-api-gateway/)
  
  ## create the stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: 
        Ref: ApiDeployment
      Description: !Sub "stage for ${stage}"
      MethodSettings:
        - ResourcePath: !Sub "/${path}"
          HttpMethod: GET
          MetricsEnabled: 'true'
          #DataTraceEnabled: 'true'
          ThrottlingBurstLimit: '999'
          #LoggingLevel: INFO
      RestApiId: 
        Ref: Api
      StageName: !Sub "${stage}"
        
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref Api
        Stage: !Ref ApiStage 
      Description: !Sub "${application} api usage plan"
      Quota:
        Limit: 30000
        Period: MONTH
      Throttle:
        BurstLimit: 3 # per second
        RateLimit: 1 # per second
      UsagePlanName: !Sub "${application}-usage-plan" 

  ApiKey: 
    Type: "AWS::ApiGateway::ApiKey"
    DependsOn: 
      - "ApiDeployment"
      - "Api"
    Properties: 
      Name: !Sub "${application}-user"
      Description: "CloudFormation created API Key"
      Enabled: "true"

  ApiUsagePlanKeyExampleUser:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn: 
      - "ApiKey"
    Properties : 
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan 

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${application}"
      Description: !Sub "${application} rest api"
      FailOnWarnings: true
      # if you dont' put a wildcard here then Accept request header required to make b64 decode happen
      BinaryMediaTypes: ["*~1*"]
      Body:
        openapi: 3.0.0
        info:
          version: 2021-05-13T09:31:00Z
          title: "${application}"
          
        paths:
          /wms:
            get:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${application}/invocations"
              responses:
                "200":
                  description: "wms tile image"

        components:
          schemas:
            Error:
              type: object
              properties:
                errorMessage: 
                  type: string
                errorType:
                  type: string
                stackTrace:
                  type: array
                  items: 
                    type: string
                cause:
                  $ref: '#/components/schemas/Error'
            StringResponse:
              type: string
            Empty:
              type: object
              
          securitySchemes:
              ApiKeyAuth:        # arbitrary name for the security scheme
                type: apiKey
                in: header       # can be "header", "query" or "cookie"
                name: x-api-key  # name of the header, query parameter or cookie
          # 2) Apply the API key globally to all operations
        security: []
          # - ApiKeyAuth: []     # use the same name as under securitySchemesssss