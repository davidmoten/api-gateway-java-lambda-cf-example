AWSTemplateFormatVersion: 2010-09-09

Parameters:

  mode:
    Default: dev
    Description: modal environment to create
    Type: String
    MinLength: 1
    MaxLength: 255
    
  artifactBucket:
    Default: weather-download-artifacts
    Type: String
  
  artifactObjectName:
    Default: weather-download-6.0-SNAPSHOT
    Type: String

Resources:

  LambdaFunctionApiGet:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Sub '${artifactBucket}'
        S3Key: !Sub '${artifactObjectName}'
      FunctionName: !Sub 'weather-api-get-${mode}'
      Handler: 'au.gov.amsa.weather.api.Handler::get'
      MemorySize: 512
      Timeout: 300 # seconds
      Role: !GetAtt 
        - LambdaFunctionApiGetRole
        - Arn
      Runtime: java8
      Environment:
        Variables:
          JSON_BUCKET: !Sub "${weatherJsonBucket}"
          
  ## give the /json api gateway resource permission to execute the lambda
  ApiGatewayInvokeApiGetLambdaPermission: 
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - Api
    - LambdaFunctionApiGet
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunctionApiGet
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/GET/encrypt"
      
  ## create the deployment of a stage (so that the stage is published to an https url)
  ApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      Description: !Sub "deployment of stage ${mode}"
      RestApiId:
        Ref: Api
      StageName: !Sub "${mode}Dummy" # must be different from stage name below (see https://blog.jayway.com/2016/08/17/introduction-to-cloudformation-for-api-gateway/)
  
  ## create the stage
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: 
        Ref: ApiDeployment
      Description: !Sub "stage for ${mode}"
      MethodSettings:
        - ResourcePath: "/json"
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          ThrottlingBurstLimit: '999'
          LoggingLevel: INFO
      RestApiId: 
        Ref: Api
      StageName: !Sub "${mode}"
      Variables:
        function: !Sub "weather-api-get-${mode}"
        
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
      - ApiId: !Ref Api
        Stage: !Ref ApiStage 
      Description: "weather api usage plan"
      Quota:
        Limit: 30000
        Period: MONTH
      Throttle:
        BurstLimit: 3 # per second
        RateLimit: 1 # per second
      UsagePlanName: !Sub "weather-api-usage-plan-${mode}" 

  ApiUsagePlanKeyWindowsService:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties : 
      KeyId: "8vnhdy5s66"
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan 

  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "weather-api-${mode}"
      Description: !Sub "${mode} weather rest api"
      FailOnWarnings: true
      Body:
        swagger: "2.0"
        info:
          version: "2017-03-30T22:50:37Z"
          title: "weather api"
        host: !Sub "weather.execute-api.ap-southeast-2.amazonaws.com"
        basePath: !Sub "/${mode}"
        schemes:
        - "https"
        paths:
          /json:
            get:
              consumes:
              - "application/json"
              produces:
              - "text/plain"
              parameters:
              - name: "stringToEncrypt"
                in: "query"
                required: true
                type: "string"
              - name: "publicKey"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                - api_key: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html\n\
                    ##  This template will pass through all parameters including path, querystring,\
                    \ header, stage variables, and context through to the integration endpoint\
                    \ via the body/payload\n#set($allParams = $input.params())\n{\n\"body-json\"\
                    \ : $input.json('$'),\n\"params\" : {\n#foreach($type in $allParams.keySet())\n\
                    \    #set($params = $allParams.get($type))\n\"$type\" : {\n    #foreach($paramName\
                    \ in $params.keySet())\n    \"$paramName\" : \"$util.escapeJavaScript($params.get($paramName))\"\
                    \n        #if($foreach.hasNext),#end\n    #end\n}\n    #if($foreach.hasNext),#end\n\
                    #end\n},\n\"stage-variables\" : {\n#foreach($key in $stageVariables.keySet())\n\
                    \"$key\" : \"$util.escapeJavaScript($stageVariables.get($key))\"\n   \
                    \ #if($foreach.hasNext),#end\n#end\n},\n\"context\" : {\n    \"account-id\"\
                    \ : \"$context.identity.accountId\",\n    \"api-id\" : \"$context.apiId\"\
                    ,\n    \"api-key\" : \"$context.identity.apiKey\",\n    \"authorizer-principal-id\"\
                    \ : \"$context.authorizer.principalId\",\n    \"caller\" : \"$context.identity.caller\"\
                    ,\n    \"cognito-authentication-provider\" : \"$context.identity.cognitoAuthenticationProvider\"\
                    ,\n    \"cognito-authentication-type\" : \"$context.identity.cognitoAuthenticationType\"\
                    ,\n    \"cognito-identity-id\" : \"$context.identity.cognitoIdentityId\"\
                    ,\n    \"cognito-identity-pool-id\" : \"$context.identity.cognitoIdentityPoolId\"\
                    ,\n    \"http-method\" : \"$context.httpMethod\",\n    \"stage\" : \"\
                    $context.stage\",\n    \"source-ip\" : \"$context.identity.sourceIp\"\
                    ,\n    \"user\" : \"$context.identity.user\",\n    \"user-agent\" : \"\
                    $context.identity.userAgent\",\n    \"user-arn\" : \"$context.identity.userArn\"\
                    ,\n    \"request-id\" : \"$context.requestId\",\n    \"resource-id\" :\
                    \ \"$context.resourceId\",\n    \"resource-path\" : \"$context.resourcePath\"\
                    \n    }\n}\n"
                # escape the substitution using ! before stageVariables.function
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${!stageVariables.function}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Empty:
            type: "object"

